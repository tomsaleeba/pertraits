name: 'CI/CD'

on: push

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  IMAGE_TAG_WITH_SHA: ghcr.io/${{ github.repository }}:${{ github.sha }}

jobs:
  check-build-deploy:
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        path: |
          ~/.npm
          ~/.pnpm-store
        key: build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          build-${{ env.cache-name }}-
          build-

    - name: Install dependencies
      run: |
        npm install --global pnpm
        cd ./frontend/
        pnpm install --frozen-lockfile
        cd ../backend/
        pnpm install --frozen-lockfile

    # - name: lint FIXME add eslint
    #   run: npm run lint

    - name: Unit test
      run: |
        cd ./frontend/
        pnpm test

    # FIXME test and lint backend

    - name: Build frontend
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        cd ./frontend/
        pnpm build

    - name: Deploy frontend
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      # FIXME what about deploying to GH pages?
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      run: |
        cd frontend/build/
        branchName=${GITHUB_REF##*/}
        bucket=${AWS_S3_BUCKET:?}
        if [ $branchName = 'develop' ]; then
          bucket="dev-${bucket}"
        fi
        aws s3 sync --delete . s3://${bucket}

    - name: Build and push backend Docker image
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      env:
        DOCKER_USERNAME: ${{ github.actor }}
        DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -eux
        echo $DOCKER_PASSWORD | docker login --password-stdin \
          --username $DOCKER_USERNAME $REGISTRY
        cd backend/
        branchName=${GITHUB_REF##*/}
        /usr/bin/docker buildx build \
          --tag $IMAGE_TAG_WITH_SHA \
          --tag $IMAGE_NAME:$branchName \
          --push \
          .

    - name: Deploy backend
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      env:
        GH_ACTIONS_GCP_ACCESS_KEY: ${{ secrets.GH_ACTIONS_GCP_ACCESS_KEY }}
        RUNNING_SERVICE_GCP_SERVICE_ACCOUNT: ${{ secrets.RUNNING_SERVICE_GCP_SERVICE_ACCOUNT }}
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
        GOOGLE_COMPUTE_ZONE: 'us-west1'
      run: |
        set -eu
        keyFile=$HOME/gcloud-service-key.json
        echo $GH_ACTIONS_GCP_ACCESS_KEY | base64 --decode --ignore-garbage > $keyFile
        set -x
        gcloud auth activate-service-account --key-file $keyFile
        gcloud config set project $GCP_PROJECT_ID
        branchName=${GITHUB_REF##*/}
        serviceName=pertraits-api-$branchName
        commonParams="--platform managed --region $GOOGLE_COMPUTE_ZONE"
        gcloud beta run deploy \
          $serviceName \
          --image $IMAGE_TAG_WITH_SHA \
          --execution-environment gen2 \
          $commonParams \
          --allow-unauthenticated \
          --max-instances=1 \
          --service-account=$RUNNING_SERVICE_GCP_SERVICE_ACCOUNT \
          --set-env-vars \
            GCS_BUCKET=$GCS_BUCKET
        gcloud beta run services describe \
          $serviceName \
          $commonParams \
          --format="value(status.address.url)"
